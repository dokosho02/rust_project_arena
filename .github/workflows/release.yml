name: Release

on:
  push:
    tags:
      - "v*" # Push tags matching 'v*', e.g., v1.0.0

env:
  PROJECT_NAME: rust_project_arena # 定义项目名称变量

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            ext: ""
          # - os: ubuntu-latest
          #   target: aarch64-linux-android
          #   ext: ""
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      # - name: Install Android NDK (for Android target)
      #   if: matrix.target == 'aarch64-linux-android'
      #   run: |
      #     # 下载 Android NDK
      #     NDK_VERSION="25.2.9519653"
      #     NDK_ZIP="android-ndk-r25b-linux.zip"
      #     wget -q https://dl.google.com/android/repository/$NDK_ZIP

      #     # 解压 NDK 到用户目录
      #     mkdir -p $HOME/android-ndk
      #     unzip -q $NDK_ZIP -d $HOME/android-ndk
      #     rm $NDK_ZIP

      #     # 设置环境变量
      #     echo "ANDROID_NDK_HOME=$HOME/android-ndk/android-ndk-r25b" >> $GITHUB_ENV
      #     echo "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      - name: Build the project
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package the binary
        shell: bash
        run: |
          mkdir -p release
          if [ "${{ matrix.target }}" == "x86_64-pc-windows-msvc" ]; then
            cp target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }}.exe release/
          else
            cp target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }} release/
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.target }}
          path: release/

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Debug artifacts directory
        run: ls -R artifacts # 调试：列出 artifacts 目录内容

      - name: Extract version from tag
        id: extract_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            version=${GITHUB_REF#refs/tags/}
            echo "Extracted version: $version"
            echo "version=$version" >> $GITHUB_OUTPUT
          else
            echo "No tag found, using default version"
            echo "version=0.0.0" >> $GITHUB_OUTPUT
          fi

      - name: Get current date
        id: get_date
        run: |
          current_date=$(date -u +"%Y-%m-%d")
          echo "Current date: $current_date"
          echo "date=$current_date" >> $GITHUB_OUTPUT

      - name: Get system architecture
        id: get_arch
        run: |
          if [ "${{ matrix.target }}" == "x86_64-pc-windows-msvc" ]; then
            arch="x86_64"
          elif [ "${{ matrix.target }}" == "aarch64-linux-android" ]; then
            arch="aarch64"
          else
            arch=$(uname -m)
          fi
          echo "System architecture: $arch"
          echo "arch=$arch" >> $GITHUB_OUTPUT

      - name: Create Release via GitHub API
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name=${GITHUB_REF#refs/tags/}
          release_name="Release $tag_name"
          response=$(curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$GITHUB_REPOSITORY/releases \
            -d "{
              \"tag_name\": \"$tag_name\",
              \"name\": \"$release_name\",
              \"draft\": false,
              \"prerelease\": false
            }")
          upload_url=$(echo "$response" | jq -r '.upload_url' | sed 's/{.*}//')
          echo "upload_url=$upload_url" >> $GITHUB_OUTPUT

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          upload_url=${{ steps.create_release.outputs.upload_url }}
          for target in x86_64-unknown-linux-gnu x86_64-pc-windows-msvc x86_64-apple-darwin aarch64-apple-darwin; do
            asset_path="artifacts/${{ env.PROJECT_NAME }}-$target/${{ env.PROJECT_NAME }}${{ matrix.ext }}"
            asset_name="${{ env.PROJECT_NAME }}-${{ steps.extract_version.outputs.version }}-${{ steps.get_date.outputs.date }}-$target${{ matrix.ext }}"
            curl -s -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @$asset_path \
              "$upload_url?name=$asset_name"
          done
