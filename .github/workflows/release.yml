name: Release

on:
  push:
    tags:
      - "v*" # Push tags matching 'v*', e.g., v1.0.0

env:
  PROJECT_NAME: rust_project_arena # 定义项目名称变量

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build the project
        run: cargo build --release

      - name: Package the binary
        shell: bash # 显式指定使用 Bash
        run: |
          mkdir -p release
          if [ "$RUNNER_OS" == "Windows" ]; then
            cp target/release/${{ env.PROJECT_NAME }}.exe release/
          else
            cp target/release/${{ env.PROJECT_NAME }} release/
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ runner.os }}
          path: release/

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Debug artifacts directory
        run: ls -R artifacts # 调试：列出 artifacts 目录内容

      - name: Extract version from tag
        id: extract_version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            version=${GITHUB_REF#refs/tags/}
            echo "Extracted version: $version"
            echo "version=$version" >> $GITHUB_OUTPUT
          else
            echo "No tag found, using default version"
            echo "version=0.0.0" >> $GITHUB_OUTPUT
          fi

      - name: Get current date
        id: get_date
        run: |
          current_date=$(date -u +"%Y-%m-%d")
          echo "Current date: $current_date"
          echo "date=$current_date" >> $GITHUB_OUTPUT

      - name: Get system architecture
        id: get_arch
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            arch="x86_64"
          elif [ "$RUNNER_OS" == "macOS" ]; then
            arch=$(uname -m)
          else
            arch=$(uname -m)
          fi
          echo "System architecture: $arch"
          echo "arch=$arch" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PROJECT_NAME }}-${{ matrix.os }}/${{ env.PROJECT_NAME }}${{ matrix.ext }}
          asset_name: ${{ env.PROJECT_NAME }}-${{ steps.extract_version.outputs.version }}-${{ steps.get_date.outputs.date }}-${{ steps.get_arch.outputs.arch }}-${{ matrix.os }}${{ matrix.ext }}
          asset_content_type: application/octet-stream
        strategy:
          matrix:
            os: [Linux, Windows, macOS]
            include:
              - os: Linux
                ext: ""
              - os: Windows
                ext: ".exe"
              - os: macOS
                ext: ""
# 2
# name: Release

# on:
#   push:
#     tags:
#       - "v*" # Push tags matching 'v*', e.g., v1.0.0

# env:
#   PROJECT_NAME: rust_project_arena # 定义项目名称变量

# jobs:
#   build:
#     runs-on: ${{ matrix.os }}
#     strategy:
#       matrix:
#         os: [ubuntu-latest, windows-latest, macos-latest]
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Rust
#         uses: actions-rust-lang/setup-rust-toolchain@v1
#         with:
#           toolchain: stable
#           override: true

#       - name: Build the project
#         run: cargo build --release

#       - name: Package the binary
#         shell: bash # 显式指定使用 Bash
#         run: |
#           mkdir -p release
#           if [ "$RUNNER_OS" == "Windows" ]; then
#             cp target/release/${{ env.PROJECT_NAME }}.exe release/
#           else
#             cp target/release/${{ env.PROJECT_NAME }} release/
#           fi

#       - name: Upload artifacts
#         uses: actions/upload-artifact@v4
#         with:
#           name: ${{ env.PROJECT_NAME }}-${{ runner.os }}
#           path: release/

#   release:
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: Download artifacts
#         uses: actions/download-artifact@v4
#         with:
#           path: artifacts

#       - name: Debug artifacts directory
#         run: ls -R artifacts # 调试：列出 artifacts 目录内容

#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ github.ref }}
#           release_name: Release ${{ github.ref }}
#           draft: false
#           prerelease: false

#       - name: Upload Release Assets for Linux
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_path: artifacts/${{ env.PROJECT_NAME }}-Linux/${{ env.PROJECT_NAME }}
#           asset_name: ${{ env.PROJECT_NAME }}-Linux
#           asset_content_type: application/octet-stream

#       - name: Upload Release Assets for Windows
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_path: artifacts/${{ env.PROJECT_NAME }}-Windows/${{ env.PROJECT_NAME }}.exe
#           asset_name: ${{ env.PROJECT_NAME }}-Windows.exe
#           asset_content_type: application/octet-stream

#       - name: Upload Release Assets for macOS
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_path: artifacts/${{ env.PROJECT_NAME }}-macOS/${{ env.PROJECT_NAME }}
#           asset_name: ${{ env.PROJECT_NAME }}-macOS
#           asset_content_type: application/octet-stream
# 1
# name: Release

# on:
#   push:
#     tags:
#       - "v*" # Push tags matching 'v*', e.g., v1.0.0

# env:
#   PROJECT_NAME: rust_project_arena # 定义项目名称变量

# jobs:
#   build:
#     runs-on: ${{ matrix.os }}
#     strategy:
#       matrix:
#         os: [ubuntu-latest, windows-latest, macos-latest]
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Rust
#         uses: actions-rs/toolchain@v1
#         with:
#           toolchain: stable
#           override: true

#       - name: Build the project
#         run: cargo build --release

#       - name: Package the binary
#         shell: bash # 显式指定使用 Bash
#         run: |
#           mkdir -p release
#           if [ "$RUNNER_OS" == "Windows" ]; then
#             cp target/release/${{ env.PROJECT_NAME }}.exe release/
#           else
#             cp target/release/${{ env.PROJECT_NAME }} release/
#           fi

#       - name: Upload artifacts
#         uses: actions/upload-artifact@v4
#         with:
#           name: ${{ env.PROJECT_NAME }}-${{ runner.os }}
#           path: release/

#   release:
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: Download artifacts
#         uses: actions/download-artifact@v4
#         with:
#           path: artifacts

#       - name: Debug artifacts directory
#         run: ls -R artifacts # 调试：列出 artifacts 目录内容

#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v2
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ github.ref }}
#           release_name: Release ${{ github.ref }}
#           draft: false
#           prerelease: false

#       - name: Upload Release Assets for Linux
#         uses: actions/upload-release-asset@v2
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_path: artifacts/${{ env.PROJECT_NAME }}-Linux/${{ env.PROJECT_NAME }}
#           asset_name: ${{ env.PROJECT_NAME }}-Linux
#           asset_content_type: application/octet-stream

#       - name: Upload Release Assets for Windows
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_path: artifacts/${{ env.PROJECT_NAME }}-Windows/${{ env.PROJECT_NAME }}.exe
#           asset_name: ${{ env.PROJECT_NAME }}-Windows.exe
#           asset_content_type: application/octet-stream

#       - name: Upload Release Assets for macOS
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_path: artifacts/${{ env.PROJECT_NAME }}-macOS/${{ env.PROJECT_NAME }}
#           asset_name: ${{ env.PROJECT_NAME }}-macOS
#           asset_content_type: application/octet-stream
